/*
 * DSS - Digital Signature Services
 *
 * Copyright (C) 2011 European Commission, Directorate-General Internal Market and Services (DG MARKT), B-1049 Bruxelles/Brussel
 *
 * Developed by: 2011 ARHS Developments S.A. (rue Nicolas Bov√© 2B, L-1253 Luxembourg) http://www.arhs-developments.com
 *
 * This file is part of the "DSS - Digital Signature Services" project.
 *
 * "DSS - Digital Signature Services" is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Lesser General Public License as published by the Free Software Foundation, either version 2.1 of the
 * License, or (at your option) any later version.
 *
 * DSS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with
 * "DSS - Digital Signature Services".  If not, see <http://www.gnu.org/licenses/>.
 */

package eu.europa.ec.markt.dss.applet;

import eu.europa.ec.markt.dss.applet.model.SignatureWizardModel;
import eu.europa.ec.markt.dss.applet.wizard.AbstractWizardPanel;

import java.io.File;

import javax.swing.JFileChooser;

/**
 * Get parameters for the MOCCA token.
 * 
 *
 * @version $Revision: 1867 $ - $Date: 2013-04-08 13:44:56 +0200 (Mon, 08 Apr 2013) $
 */

public class MOCCAParamsPanel extends AbstractWizardPanel {

    public static final String ID = "MOCCA";
    private SignatureWizardModel model;

    /** Creates new form PKCS11ParamsPanel */
    public MOCCAParamsPanel(SignatureWizardModel model) {

        this.model = model;

        initComponents();
        
        model.setMoccaSignatureAlgorithm((String)signatureAlgorithm.getSelectedItem());

    }

    @Override
    public Object getPanelDescriptorIdentifier() {
        return ID;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        signatureAlgorithm = new javax.swing.JComboBox();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(400, 250));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Signature algorithm:");

        signatureAlgorithm.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "http://www.w3.org/2000/09/xmldsig#rsa-sha1", "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256", "http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha1" }));
        signatureAlgorithm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signatureAlgorithmActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(signatureAlgorithm, 0, 254, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(signatureAlgorithm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(219, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void signatureAlgorithmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signatureAlgorithmActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_signatureAlgorithmActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JComboBox signatureAlgorithm;
    // End of variables declaration//GEN-END:variables

    /*
     * (non-Javadoc)
     * 
     * @see eu.europa.ec.markt.dss.applet.wizard.WizardPanelDescriptor#getNextPanelDescriptor()
     */
    @Override
    public Object getNextPanelDescriptor() {
        if (model.getMoccaSignatureAlgorithm() != null) {
            return ChooseCertificatePanel.ID;
        } else {
            return null;
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see eu.europa.ec.markt.dss.applet.wizard.WizardPanelDescriptor#getBackPanelDescriptor()
     */
    @Override
    public Object getBackPanelDescriptor() {
        return SignatureTokenAPIPanel.ID;
    }

    @Override
    public void aboutToDisplayPanel() {
        getWizard().setStepsProgression(4);
    }
}
