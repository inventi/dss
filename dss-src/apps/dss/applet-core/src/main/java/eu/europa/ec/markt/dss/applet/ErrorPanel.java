/*
 * DSS - Digital Signature Services
 *
 * Copyright (C) 2011 European Commission, Directorate-General Internal Market and Services (DG MARKT), B-1049 Bruxelles/Brussel
 *
 * Developed by: 2011 ARHS Developments S.A. (rue Nicolas Bov√© 2B, L-1253 Luxembourg) http://www.arhs-developments.com
 *
 * This file is part of the "DSS - Digital Signature Services" project.
 *
 * "DSS - Digital Signature Services" is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Lesser General Public License as published by the Free Software Foundation, either version 2.1 of the
 * License, or (at your option) any later version.
 *
 * DSS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with
 * "DSS - Digital Signature Services".  If not, see <http://www.gnu.org/licenses/>.
 */

package eu.europa.ec.markt.dss.applet;

import eu.europa.ec.markt.dss.EncodingException;
import eu.europa.ec.markt.dss.NotETSICompliantException;
import eu.europa.ec.markt.dss.applet.model.SignatureWizardModel;
import eu.europa.ec.markt.dss.applet.wizard.AbstractWizardPanel;
import eu.europa.ec.markt.dss.signature.ProfileException;

import java.awt.BorderLayout;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;

import javax.swing.JScrollPane;
import javax.swing.JTextArea;

/**
 * Displays an error to the user.
 * 
 *
 * @version $Revision: 1867 $ - $Date: 2013-04-08 13:44:56 +0200 (Mon, 08 Apr 2013) $
 */

@SuppressWarnings("serial")
public class ErrorPanel extends AbstractWizardPanel {

    public static final String ID = "ERROR_PANEL";
    private SignatureWizardModel model;
    private boolean errorLogDisplayed = false;
    private JScrollPane textLog = null;

    /** Creates new form WizardFinishedPanel */
    public ErrorPanel(SignatureWizardModel signatureModel) {
        this.model = signatureModel;

        initComponents();

    }

    @Override
    public Object getPanelDescriptorIdentifier() {
        return ID;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new java.awt.BorderLayout());

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                "/eu/europa/ec/markt/dss/applet/wizard/big_error.png"))); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("eu/europa/ec/markt/dss/applet/i18n"); // NOI18N
        jLabel1.setText(bundle.getString("SIGNED_FILE_SAVED")); // NOI18N
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });
        add(jLabel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jLabel1MouseClicked

        if (evt.getClickCount() == 2 && textLog != null) {

            if (errorLogDisplayed) {
                remove(textLog);
            } else {
                textLog.setSize(getWidth(), 150);
                add(textLog, BorderLayout.SOUTH);
            }

            repaint();
            errorLogDisplayed = !errorLogDisplayed;

        }
    }// GEN-LAST:event_jLabel1MouseClicked

    @Override
    public Object getNextPanelDescriptor() {
        return ActivityPanel.ID;
    }

    @Override
    public Object getBackPanelDescriptor() {
        return ActivityPanel.ID;
    }

    @Override
    public void aboutToDisplayPanel() {
        Exception ex = getWizard().getModel().getException();

        if (textLog != null) {
            remove(textLog);
            textLog = null;
        }

        if (ex != null) {

            textLog = new JScrollPane();
            JTextArea textArea = new JTextArea(5, 80);
            textArea.setColumns(20);
            textArea.setEditable(false);
            textArea.setForeground(new java.awt.Color(255, 0, 0));
            textArea.setRows(5);
            textArea.setBorder(null);
            textLog.setViewportView(textArea);

            StringWriter string = new StringWriter();
            PrintWriter writer = new PrintWriter(string);
            ex.printStackTrace(writer);
            writer.close();
            textArea.setText(string.toString());

            if (ex instanceof NotETSICompliantException) {
                jLabel1.setText("<html>" + java.util.ResourceBundle.getBundle("eu/europa/ec/markt/dss/applet/i18n").getString(
                        "NOT_COMPLIANT_WITH_ETSI")
                        + " : <br/>" + ex.getLocalizedMessage() + "</html>");
            } else if (ex instanceof EncodingException) {
                jLabel1.setText("<html>" + java.util.ResourceBundle.getBundle("eu/europa/ec/markt/dss/applet/i18n").getString(
                        "ENCODING_EXCEPTION")
                        + " : <br/>" + ex.getLocalizedMessage() + "</html>");
            } else if (ex instanceof IOException) {
                jLabel1.setText("<html>" + java.util.ResourceBundle.getBundle("eu/europa/ec/markt/dss/applet/i18n").getString(
                        "COMMUNICATION_ERROR")
                        + " : <br/>" + ex.getLocalizedMessage() + "</html>");
            } else if (ex instanceof ProfileException) {
                jLabel1.setText("<html>" + java.util.ResourceBundle.getBundle("eu/europa/ec/markt/dss/applet/i18n").getString(
                        "UNSUPPORTED_PROFILE")
                        + " : <br/>" + ex.getLocalizedMessage() + "</html>");
            } else {
                jLabel1.setText("<html>" + java.util.ResourceBundle.getBundle("eu/europa/ec/markt/dss/applet/i18n").getString(
                        "AN_ERROR_OCCURED")
                        + " : <br/>" + ex.getLocalizedMessage() + "</html>");
            }

        } else {
            textLog = null;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
