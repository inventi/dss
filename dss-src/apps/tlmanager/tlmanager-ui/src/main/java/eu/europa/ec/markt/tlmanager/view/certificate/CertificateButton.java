/*
 * DSS - Digital Signature Services
 *
 * Copyright (C) 2011 European Commission, Directorate-General Internal Market and Services (DG MARKT), B-1049 Bruxelles/Brussel
 *
 * Developed by: 2011 ARHS Developments S.A. (rue Nicolas Bov√© 2B, L-1253 Luxembourg) http://www.arhs-developments.com
 *
 * This file is part of the "DSS - Digital Signature Services" project.
 *
 * "DSS - Digital Signature Services" is free software: you can redistribute it and/or modify it under the terms of
 * the GNU Lesser General Public License as published by the Free Software Foundation, either version 2.1 of the
 * License, or (at your option) any later version.
 *
 * DSS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with
 * "DSS - Digital Signature Services".  If not, see <http://www.gnu.org/licenses/>.
 */

package eu.europa.ec.markt.tlmanager.view.certificate;

import eu.europa.ec.markt.tlmanager.core.Configuration;
import eu.europa.ec.markt.tlmanager.view.common.ContentDialog;
import eu.europa.ec.markt.tlmanager.view.multivalue.ContentWatcher;
import eu.europa.ec.markt.tlmanager.view.multivalue.MandatoryLabelHandler;

import java.awt.BorderLayout;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ResourceBundle;

import javax.swing.JFileChooser;

/**
 * Opens a <code>CertificatePanel</code> and displays short information about a certificate.
 * 
 *
 * @version $Revision: 1867 $ - $Date: 2013-04-08 13:44:56 +0200 (Mon, 08 Apr 2013) $
 */
public class CertificateButton extends javax.swing.JPanel implements ContentWatcher {
    private static final ResourceBundle uiKeys = ResourceBundle.getBundle(
            "eu/europa/ec/markt/tlmanager/uiKeysComponents", Configuration.getInstance().getLocale());

    private MandatoryLabelHandler labelHandler;

    /**
     * The default constructor for CertificateButton.
     */
    public CertificateButton() {
        initComponents();
        certificatePanel = new CertificatePanel();
        certificatePanel.addContentWatcher(this);
        initCertificateButton(null);
    }
    
    /**
     * Another constructor for CertificateButton.
     */
    public CertificateButton(JFileChooser fileChooser) {
        initComponents();
        certificatePanel = new CertificatePanel(fileChooser);
        certificatePanel.addContentWatcher(this);
        initCertificateButton(null);
    }

    private void initCertificateButton(final Frame container) {
        certificateButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (dialog == null) {
                    dialog = new ContentDialog(container, uiKeys.getString("CertificateButton.certificateViewer"),
                            true);
                    dialog.setSize(500, 400);
                    dialog.getContentPane().setLayout(new BorderLayout());
                    dialog.getContentPane().add(certificatePanel, BorderLayout.CENTER);
                    dialog.setDialogContent(certificatePanel);
                }

                dialog.setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        distinguishedName = new javax.swing.JTextField();
        certificateButton = new javax.swing.JButton();
        digitalIdLabel = new javax.swing.JLabel();
        boxSN = new javax.swing.JCheckBox();
        boxSKI = new javax.swing.JCheckBox();
        boxCert = new javax.swing.JCheckBox();

        distinguishedName.setEnabled(false);
        distinguishedName.setName("distinguishedName"); // NOI18N

        certificateButton.setText(uiKeys.getString("CertificateButton.viewCertificate")); // NOI18N
        certificateButton.setName("certificateButton"); // NOI18N

        digitalIdLabel.setText(uiKeys.getString("Certificate.label.useForTL")); // NOI18N

        boxSN.setText(uiKeys.getString("Certificate.label.subjectName")); // NOI18N
        boxSN.setName("boxSN"); // NOI18N
        boxSN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxSNActionPerformed(evt);
            }
        });

        boxSKI.setText(uiKeys.getString("Certificate.label.ski")); // NOI18N
        boxSKI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxSKIActionPerformed(evt);
            }
        });

        boxCert.setSelected(true);
        boxCert.setText(uiKeys.getString("Certificate.label.certificate")); // NOI18N
        boxCert.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(distinguishedName, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(certificateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(digitalIdLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(boxCert)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(boxSN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(boxSKI)
                .addContainerGap(70, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(distinguishedName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(certificateButton)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(digitalIdLabel)
                        .addComponent(boxCert)
                        .addComponent(boxSN)
                        .addComponent(boxSKI)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void boxSKIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxSKIActionPerformed
        certificatePanel.getCertificateModel().setSki(boxSKI.isSelected());
    }//GEN-LAST:event_boxSKIActionPerformed

    private void boxSNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxSNActionPerformed
        certificatePanel.getCertificateModel().setSn(boxSN.isSelected());
    }//GEN-LAST:event_boxSNActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox boxCert;
    private javax.swing.JCheckBox boxSKI;
    private javax.swing.JCheckBox boxSN;
    private javax.swing.JButton certificateButton;
    private javax.swing.JLabel digitalIdLabel;
    private javax.swing.JTextField distinguishedName;
    // End of variables declaration//GEN-END:variables
    private CertificatePanel certificatePanel;
    private ContentDialog dialog;

    /**
     * Sets the <code>MandatoryLabelHandler</code>
     * 
     * @param labelHandler the handler
     */
    public void setLabelHandler(MandatoryLabelHandler labelHandler) {
        this.labelHandler = labelHandler;
    }

    /** {@inheritDoc} */
    @Override
    public void contentHasChanged(boolean empty, String text) {
        if (labelHandler != null) {
            labelHandler.handleLabelStateFor(this, empty);
        }

        distinguishedName.setText(text);
        distinguishedName.setCaretPosition(0);
        
        CertificateModel model = certificatePanel.getCertificateModel();
        boxSN.setSelected(model.isSn());
        if (model.isSkiAvailable()) {
            boxSKI.setSelected(model.isSki());
            boxSKI.setEnabled(true);
        } else {
            boxSKI.setSelected(false);
            boxSKI.setEnabled(false);
        }
    }

    /**
     * @return the certificatePanel
     */
    public CertificatePanel getCertificatePanel() {
        return certificatePanel;
    }
}